const User = require("../models/user.js")
const asyncHandler = require('express-async-handler');
const jwt = require("jsonwebtoken")

const bcrypt = require("bcrypt");
const saltRounds = 10;
// const cors = require("cors");

async function hashPassword(password) {
    const hash = await bcrypt.hash(password,saltRounds);
    return hash
}

async function matchPassword(enteredPass, storedPass) {
    const isMatch = await bcrypt.compare(enteredPass, storedPass) 
    return isMatch
}

//hashed register with bcrypt
exports.user_register_api = asyncHandler( async(req, res, next)=>{
    const userAlreadyExists = await User.findOne({username:req.body.username}) || null
    const password = await hashPassword(req.body.password)
    console.log({password})
    const newUser = await new User({
        username: req.body.username,
        password: password,
    })

// console.log({newUser})

    if(newUser===null){
        const err = new Error("Fields not filled out")
        err.status=400;
        return next(err)
    } 

    if(userAlreadyExists){
        const err = new Error("User already exists.")
            err.status=400;
            return next(err)
    }

    const result =  await newUser.save()   
    
    jwt.sign({user: newUser}, process.env.JWT_SECRET, {expiresIn: '1d'},(err,token)=>{  
    
        res.json({
                user: newUser.username,
                token
            })
    });
})

exports.user_login_api = asyncHandler(async (req, res, next) => {
    
    const user = await User.findOne({username:req.body.username}) || null    

    console.log({user})

    if(!user){
        const err = new Error("User not found")
            err.status=400;
            return next(err)
    }

    const authPass =  await matchPassword(req.body.password,user.password)
    console.log({authPass})

    if(!authPass){
        const err = new Error("Password is incorrect")
        err.status=400;
        return next(err);
    } 

    const userID = user.username
   
    jwt.sign({user: user}, process.env.JWT_SECRET, {expiresIn: '1d'},(err,token)=>{  
    
        res.json({
                user:user.username,
                token
            })
    });
})

exports.user_test_api = asyncHandler(async (req, res, next) => {
   res.json({
        message:"not yet implemented"
   })
});

exports.user_users_api_get = asyncHandler(async (req, res, next) => {

    const users = await User.find({}).select("username")

    res.json({
         users
    })
 });




